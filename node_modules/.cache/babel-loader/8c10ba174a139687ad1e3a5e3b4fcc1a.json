{"ast":null,"code":"var _jsxFileName = \"/home/mlandry/pokemaster/src/components/TypeCard.js\";\nimport React from \"react\"; // const TypeCard = ({ type1, type2 }) => {\n//   console.log(type1, type2);\n//     if (!type1 && !type2) return <div></div>;\n//   if (type2) {\n//     return (\n//       <div>\n//         <img src={types[`${type1}.png`]} />\n//         <img src={types[`${type2}.png`]} />\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div>\n//         <img src={types[`${type1}.png`]} />\n//       </div>\n//     );\n//   }\n//   return <img src={types[\"bug.png\"]} />;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction importAll(r) {\n  let images = {};\n  r.keys().map((item, index) => {\n    images[item.replace(\"./\", \"\")] = r(item);\n  });\n  return images;\n}\n\nconst typeImg = importAll(require.context(\"../images/type\", false, /\\.(png|jpe?g|svg)$/)); // const types = {\n//   0: \"normal\",\n//   1: \"fire\",\n//   2: \"water\",\n//   3: \"electric\",\n//   4: \"grass\",\n//   5: \"ice\",\n//   6: \"fighting\",\n//   8: \"poison\",\n//   9: \"ground\",\n//   10: \"flying\",\n//   11: \"psychic\",\n//   12: \"bug\",\n//   13: \"rock\",\n//   14: \"ghost\",\n//   15: \"dragon\",\n//   16: \"dark\",\n//   17: \"steel\",\n//   18: \"fairy\",\n// };\n\nconst TypeCard = props => {\n  console.log(props.type);\n  if (!props.type) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \" \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 27\n  }, this);\n};\n\n_c = TypeCard;\nexport default TypeCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeCard\");","map":{"version":3,"sources":["/home/mlandry/pokemaster/src/components/TypeCard.js"],"names":["React","importAll","r","images","keys","map","item","index","replace","typeImg","require","context","TypeCard","props","console","log","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,CAAC,CAACE,IAAF,GAASC,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5BJ,IAAAA,MAAM,CAACG,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAN,GAAiCN,CAAC,CAACI,IAAD,CAAlC;AACD,GAFD;AAGA,SAAOH,MAAP;AACD;;AAED,MAAMM,OAAO,GAAGR,SAAS,CACvBS,OAAO,CAACC,OAAR,CAAgB,gBAAhB,EAAkC,KAAlC,EAAyC,oBAAzC,CADuB,CAAzB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB;AACA,MAAI,CAACH,KAAK,CAACG,IAAX,EAAiB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAClB,CAHD;;KAAMJ,Q;AAKN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\n\r\n// const TypeCard = ({ type1, type2 }) => {\r\n//   console.log(type1, type2);\r\n//     if (!type1 && !type2) return <div></div>;\r\n//   if (type2) {\r\n//     return (\r\n//       <div>\r\n//         <img src={types[`${type1}.png`]} />\r\n//         <img src={types[`${type2}.png`]} />\r\n//       </div>\r\n//     );\r\n//   } else {\r\n//     return (\r\n//       <div>\r\n//         <img src={types[`${type1}.png`]} />\r\n//       </div>\r\n//     );\r\n//   }\r\n//   return <img src={types[\"bug.png\"]} />;\r\n// };\r\n\r\nfunction importAll(r) {\r\n  let images = {};\r\n  r.keys().map((item, index) => {\r\n    images[item.replace(\"./\", \"\")] = r(item);\r\n  });\r\n  return images;\r\n}\r\n\r\nconst typeImg = importAll(\r\n  require.context(\"../images/type\", false, /\\.(png|jpe?g|svg)$/)\r\n);\r\n\r\n// const types = {\r\n//   0: \"normal\",\r\n//   1: \"fire\",\r\n//   2: \"water\",\r\n//   3: \"electric\",\r\n//   4: \"grass\",\r\n//   5: \"ice\",\r\n//   6: \"fighting\",\r\n//   8: \"poison\",\r\n//   9: \"ground\",\r\n//   10: \"flying\",\r\n//   11: \"psychic\",\r\n//   12: \"bug\",\r\n//   13: \"rock\",\r\n//   14: \"ghost\",\r\n//   15: \"dragon\",\r\n//   16: \"dark\",\r\n//   17: \"steel\",\r\n//   18: \"fairy\",\r\n// };\r\n\r\nconst TypeCard = (props) => {\r\n  console.log(props.type);\r\n  if (!props.type) return <div> </div>;\r\n};\r\n\r\nexport default TypeCard;\r\n"]},"metadata":{},"sourceType":"module"}